COMPILER Instrumenter

	int beginOfImports = 0;
	List<Class> classes = new ArrayList<>();
	Stack<String> classNameStack = new Stack<>();
	List<Block> allBlocks = new ArrayList<>();
	Stack<Block> blockStack = new Stack<>();
	Class curClass = null;
	Method curMeth = null;
	Block curBlock = null;

	public static class Class {
		String name;
		boolean isMain;
		List<Method> methods = new ArrayList<>();
		public Class(String name) {this.name = name;}
		public Class(String name, boolean isMain) {
			this.name = name;
			this.isMain = isMain;
		}

		@Override
		public boolean equals(Object o) {
			if (this == o) return true;
			if (o == null || getClass() != o.getClass()) return false;
			Class method = (Class) o;
			if (isMain != method.isMain) return false;
			return name.equals(method.name);
		}

		@Override
		public int hashCode() {
			int result = name.hashCode();
			result = 31 * result + (isMain ? 1 : 0);
			return result;
		}
	}

	public static class Method {
		String name;
		boolean isMain;
		List<Block> blocks = new ArrayList<>();
		public Method(String name) {this.name = name;}
		public Method(String name, boolean isMain) {
			this.name = name;
			this.isMain = isMain;
		}

		@Override
		public boolean equals(Object o) {
			if (this == o) return true;
			if (o == null || getClass() != o.getClass()) return false;
			Method method = (Method) o;
			if (isMain != method.isMain) return false;
			return name.equals(method.name);
		}

		@Override
		public int hashCode() {
			int result = name.hashCode();
			result = 31 * result + (isMain ? 1 : 0);
			return result;
		}
	}

	public static class Block {
		Class clazz;
		Method method;
		int beg, end;
		int begPos, endPos;
		boolean isMethodBlock;
		boolean insertBraces;

		public String toString() {
			return String.format("%s%s: {%d[%s]-%s[%s]}%s",
				clazz.name,
				method != null ? ("." + method.name) : "",
				beg,
				begPos,
				end != 0 ? end : "?",
				endPos != 0 ? endPos : "?",
				isMethodBlock ? " m" : insertBraces ? " ins" : ""
			);
	  }

		@Override
		public boolean equals(Object o) {
			if (this == o) return true;
			if (o == null || getClass() != o.getClass()) return false;
			Block block = (Block) o;
			if (beg != block.beg) return false;
			if (end != block.end) return false;
			if (begPos != block.begPos) return false;
			if (endPos != block.endPos) return false;
			if (isMethodBlock != block.isMethodBlock) return false;
			if (insertBraces != block.insertBraces) return false;
			if (!clazz.equals(block.clazz)) return false;
			return method.equals(block.method);
		}

		@Override
		public int hashCode() {
			int result = clazz.hashCode();
			result = 31 * result + method.hashCode();
			result = 31 * result + beg;
			result = 31 * result + end;
			result = 31 * result + begPos;
			result = 31 * result + endPos;
			result = 31 * result + (isMethodBlock ? 1 : 0);
			result = 31 * result + (insertBraces ? 1 : 0);
			return result;
		}
	}

	void markBeginOfImports() {
		beginOfImports = t.charPos + t.val.length();
	}

	void enterClass() {
		classNameStack.push(t.val);
		curClass = new Class(String.join(".", classNameStack));
		classes.add(curClass);
		System.out.printf("entering class <%s>\n", curClass.name);

	}

	void leaveClass() {
		classNameStack.pop();
		System.out.printf("left class <%s>\n", curClass.name);
	}

	void enterMethod() {
		assert curClass != null;
		curMeth = new Method(t.val);
		curClass.methods.add(curMeth);
		System.out.println("found method declaration of: " + curMeth.name);
	}

	void enterMainMethod() {
		enterMethod();
		curMeth.isMain = true;
		curClass.isMain = true;
		System.out.println("method is main entry point.");
	}

	void leaveMethod() {
		curBlock.isMethodBlock = true;
		System.out.println("left method: " + curMeth.name);
		curMeth = null;
	}

	void enterStaticBlock() {
		curMeth = new Method(t.val);
		curClass.methods.add(curMeth);
		System.out.println("found static block");
  }

	void leaveStaticBlock() {
		System.out.println("left static block");
		curMeth = null;
	}

	void enterBlock(boolean missingBraces) {
		assert curMeth != null;
		if (curBlock != null) {
			blockStack.push(curBlock);
		}
		curBlock = new Block();
		curBlock.clazz = curClass;
		curBlock.method = curMeth;
		curBlock.beg = t.line;
		curBlock.begPos = t.charPos + t.val.length();
		curBlock.insertBraces = missingBraces;
		allBlocks.add(curBlock);
		curMeth.blocks.add(curBlock);
		System.out.printf("entering block %s\n", curBlock);
	}

	void enterBlock() {
		enterBlock(false); // no missing braces
	}

	void leaveBlock() {
		curBlock.end = t.line;
		curBlock.endPos = t.charPos + t.val.length();
		System.out.printf("left block %s\n", curBlock);
		if (blockStack.empty()) {
			if ("static".equals(curMeth.name)) {
				leaveStaticBlock();
			} else {
				leaveMethod();
			}
			curBlock = null;
		} else {
			curBlock = blockStack.pop();
		}
	}

	void checkInsertLBrace() {
		if (t.kind == _else && la.kind == _if) {
			System.out.println("else if found. no block.");
			return;
		}
		if (la.kind != _lbrace) {
			System.out.println("found single statement block.");
			enterBlock(true);
		}
	}

	void checkInsertRBrace() {
		if (curBlock.insertBraces) {
			System.out.println("left single statement block.");
			leaveBlock();
		}
	}

	boolean identAndLPar() {
		return la.kind == _ident && scanner.Peek().kind == _lpar;
	}

	boolean staticAndLBrace() {
		return la.kind == _static && scanner.Peek().kind == _lbrace;
	}

	boolean isLabel() {
	  return la.kind == _ident && scanner.Peek().kind == _colon;
	}

	boolean isEntryPoint() {
		return la.kind == _public
				&& scanner.Peek().kind == _static
				&& scanner.Peek().kind == _void
				&& scanner.Peek().kind == _main;
	}

	boolean isInterfaceEntryPoint() {
		// the "public" can be omitted in interfaces (implied)
		return la.kind == _static
				&& scanner.Peek().kind == _void
				&& scanner.Peek().kind == _main;
	}

CHARACTERS
	letter = 'a' .. 'z' + 'A'..'Z'.
	digit  = '0'..'9'.
TOKENS
	ident  = letter {letter | digit | '_'}.
	// .. weitere Java-Token einfügen und eventuell die dazu nötigen Zeichenklassen
	lpar   = '('.
	lbrace = '{'.
	colon  = ':'.
	static = "static".
	if     = "if".
	else   = "else".
	public = "public".
	void   = "void".
	main   = "main".

COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "//" TO '\n'

IGNORE "\t\n\r"

PRODUCTIONS

Instrumenter = [PackageDecl] { Class | Interface | ANY }.
PackageDecl = "package" {ANY} ";" (. markBeginOfImports(); .)
						.
Class =
			"class" ident						(. enterClass(); .)
			{ANY} "{"
			{ Class | Interface
				| "=" {ANY} ";"  // against class member with initializers
				| IF(isEntryPoint()) MainMethod
				| IF(identAndLPar()) MethodDecl
				| IF(staticAndLBrace()) StaticBlock
				| ANY
			}
			"}"											(. leaveClass(); .)
		.
Interface =
					"interface" ident		(. enterClass(); .)
					{ANY} "{"
					{ Interface | Class
						| "=" {ANY} ";"  // against class member with initializers
						| IF(isInterfaceEntryPoint()) MainMethod
						| IF(identAndLPar()) MethodDecl
						| ANY
					}
					"}"									(. leaveClass(); .)
					.
MainMethod =
		[public] static void main	(. enterMainMethod(); .)
		BracketExpr Block
		.
StaticBlock =	static 					(. enterStaticBlock(); .)
						Block.
MethodDecl  = ident 					(. enterMethod(); .)
						BracketExpr (";" | Block).
Statement =
		if BracketExpr BlockOrSingleStatement [else BlockOrSingleStatement]
		| SwitchStatement
		| "while" BracketExpr BlockOrSingleStatement
 		| "do" BlockOrSingleStatement "while" BracketExpr ";"
		| "for" BracketExpr BlockOrSingleStatement
		| "try" Block {"catch" BracketExpr Block} ["finally" Block]
		| ("break" | "return" | "continue") {ANY} ";"
		| IF(isLabel()) ident colon
		| (ident | QuotedText) {ANY | QuotedText | LambdaExpression} ";"
		| Block
		| ";"
		.
BlockOrSingleStatement =
		Block
		| (. checkInsertLBrace(); .) Statement (. checkInsertRBrace(); .)
		.
SwitchStatement =
			"switch" BracketExpr "{"
			{"case" {ANY} ":"				(. checkInsertLBrace(); .)
				{Statement}						(. checkInsertRBrace(); .)
				}
			["default" ":"					(. checkInsertLBrace(); .)
				{Statement}						(. checkInsertRBrace(); .)
				]
			"}"
			.
QuotedText = '"' {ANY} '"'.
BracketExpr = "(" {BracketExpr | ANY} ")".
LambdaExpression = "->" (Block | LambdaBody).
LambdaBody = 									(. checkInsertLBrace(); .)
				(ANY | BracketExpr | QuotedText | ident)
				{ANY | BracketExpr}		(. checkInsertRBrace(); .)
				(")" | ";")
				.
Block = "{"										(. enterBlock(); .)
				{Statement}
				"}"										(. leaveBlock(); .)
			.

END Instrumenter.
