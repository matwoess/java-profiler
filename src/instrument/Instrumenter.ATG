COMPILER Instrumenter

	List<Block> allBlocks = new ArrayList<>();
	Stack<Block> blockStack = new Stack<>();
	Stack<String> classStack = new Stack<>();
	String curMeth = null;
	Block curBlock = null;

	public static class Block {
		String clazz;
		String method;
		int beg, end;
		int begPos, endPos;
		boolean isMethodBlock;
		boolean insertBraces;

		public String toString() {
			return String.format("%s%s: {%d[%s]-%s[%s]}%s",
				clazz,
				method != null ? ("." + method) : "",
				beg,
				begPos,
				end != 0 ? end : "?",
				endPos != 0 ? endPos : "?",
				isMethodBlock ? " m" : insertBraces ? " ins" : ""
			);
	  }
	  @Override
    public boolean equals(Object o) {
      if (this == o) return true;
      if (o == null || getClass() != o.getClass()) return false;
      Block block = (Block) o;
      if (beg != block.beg) return false;
      if (end != block.end) return false;
      if (begPos != block.begPos) return false;
      if (endPos != block.endPos) return false;
      if (isMethodBlock != block.isMethodBlock) return false;
      if (insertBraces != block.insertBraces) return false;
      if (!Objects.equals(clazz, block.clazz)) return false;
      return Objects.equals(method, block.method);
    }

    @Override
    public int hashCode() {
      int result = clazz != null ? clazz.hashCode() : 0;
      result = 31 * result + (method != null ? method.hashCode() : 0);
      result = 31 * result + beg;
      result = 31 * result + end;
      result = 31 * result + begPos;
      result = 31 * result + endPos;
      result = 31 * result + (isMethodBlock ? 1 : 0);
      result = 31 * result + (insertBraces ? 1 : 0);
      return result;
    }
	}

	void enterClass() {
		String curClass = t.val;
		System.out.printf("entering class <%s>\n", curClass);
		classStack.push(curClass);

	}

	void leaveClass() {
		String curClass = classStack.pop();
		System.out.printf("left class <%s>\n", curClass);
	}

	void enterMethod() {
		curMeth = t.val;
		System.out.println("found method declaration of: " + curMeth);
	}

	void leaveMethod() {
		curBlock.isMethodBlock = true;
		System.out.println("left method: " + curMeth);
		curMeth = null;
	}

	void enterStaticBlock() {
		curMeth = t.val;
		System.out.println("found static block");
  }

	void leaveStaticBlock() {
		System.out.println("left static block");
		curMeth = null;
	}

	void enterBlock(boolean missingBraces) {
		if (curBlock != null) {
			blockStack.push(curBlock);
		}
		curBlock = new Block();
		curBlock.clazz = String.join(".", classStack);
		curBlock.method = curMeth;
		curBlock.beg = t.line;
		curBlock.begPos = t.charPos + t.val.length();
		curBlock.insertBraces = missingBraces;
		allBlocks.add(curBlock);
		System.out.printf("entering block %s\n", curBlock);
	}

	void enterBlock() {
		enterBlock(false); // no missing braces
	}

	void leaveBlock() {
		curBlock.end = t.line;
		curBlock.endPos = t.charPos + t.val.length();
		System.out.printf("left block %s\n", curBlock);
		if (blockStack.empty()) {
			if ("static".equals(curMeth)) {
				leaveStaticBlock();
			} else {
				leaveMethod();
			}
			curBlock = null;
		} else {
			curBlock = blockStack.pop();
		}
	}

	void checkInsertLBrace() {
		if (t.kind == _else && la.kind == _if) {
			System.out.println("else if found. no block.");
			return;
		}
		if (la.kind != _lbrace) {
			System.out.println("found single statement block.");
			enterBlock(true);
		}
	}

	void checkInsertRBrace() {
		if (curBlock.insertBraces) {
			System.out.println("left single statement block.");
			leaveBlock();
		}
	}

	boolean identAndLPar() {
		return t.kind == _ident && la.kind == _lpar;
	}

	boolean staticAndLBrace() {
		return t.kind == _static && la.kind == _lbrace;
	}

CHARACTERS
	letter = 'a' .. 'z' + 'A'..'Z'.
	digit  = '0'..'9'.
TOKENS
	ident  = letter {letter | digit | '_'}.
	// .. weitere Java-Token einfügen und eventuell die dazu nötigen Zeichenklassen
	lpar   = '('.
	lbrace = '{'.
	static = "static".
	if     = "if".
	else   = "else".
IGNORE "\t\n\r"

PRODUCTIONS

Instrumenter = { {ANY} Class }.
Class =
			"class" ident						(. enterClass(); .)
			{ANY} "{"
			{ Class
				| "abstract" ident {ANY} ";"
				| IF(identAndLPar()) MethodDecl
				| IF(staticAndLBrace()) StaticBlock
				| ANY
			}
			"}"											(. leaveClass(); .)
		.
StaticBlock =									(. enterStaticBlock(); .)
						Block.
MethodDecl  =									(. enterMethod(); .)
						BracketExpr Block.
Statement =
		if BracketExpr						(. checkInsertLBrace(); .)
			Statement								(. checkInsertRBrace(); .)
			[else										(. checkInsertLBrace(); .)
				Statement							(. checkInsertRBrace(); .)
			]
		| "switch" BracketExpr "{"
			{"case" {ANY} ":" {Statement}}
			["default" ":" {Statement}]
			"}"
		| "while" BracketExpr Statement
		| "do" Statement "while" BracketExpr ";"
		| "for" BracketExpr Statement
		| "try" Block {"catch" BracketExpr Block} ["finally" Block]
		| ("break" | "return" | "continue") {ANY} ";"
		| ident ({ANY | QuotedText | "->" Statement} ";" | ":")
		| Block
		| ";" .
QuotedText = '"' {ANY} '"'.
BracketExpr = "(" {BracketExpr | ANY} ")".
Block = "{"										(. enterBlock(); .)
				{Statement}
				"}"										(. leaveBlock(); .)
			.

END Instrumenter.
