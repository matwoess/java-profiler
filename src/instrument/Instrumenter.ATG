COMPILER Instrumenter

	List<Block> allBlocks = new ArrayList<>();
	Stack<Block> blockStack = new Stack<>();
	String curClass = null;
	String curMeth = null;
	Block curBlock = null;

	class Block {
	  String clazz;
	  String method;
	  int beg, end;
	  boolean isMethodBlock;

    public String toString() {
      return String.format("%s%s: {%d-%s}%s", clazz, method != null ? ("." + method) : "", beg, end != 0 ? end : "?", isMethodBlock ? " m" : "");
	  }
	}

	void enterClass() {
		curClass = t.val;
		System.out.printf("entering class <%s>\n", curClass);
	}

	void leaveClass() {
		System.out.printf("leaving class <%s>\n", curClass);
		curClass = null;
	}

	void checkForMethodDeclaration() {
		if (curMeth != null) return;
		if (t.kind == _ident && la.kind == _lpar) {
			curMeth = t.val;
			System.out.println("found method declaration of: " + curMeth);
		}
	}

	void enterBlock() {
		if (curBlock != null) {
			blockStack.push(curBlock);
		}
		curBlock = new Block();
		curBlock.clazz = curClass;
		curBlock.method = curMeth;
		curBlock.beg = t.line;
		System.out.printf("entering block %s\n", curBlock);
	}

	void leaveBlock() {
		curBlock.end = t.line;
		System.out.printf("leaving block %s\n", curBlock);
		allBlocks.add(curBlock);
		if (blockStack.empty()) {
			curBlock.isMethodBlock = true;
			curMeth = null;
			curBlock = null;
		} else {
			curBlock = blockStack.pop();
		}
	}

CHARACTERS
	letter = 'a' .. 'z' + 'A'..'Z'.
	digit  = '0'..'9'.
TOKENS
	ident = letter {letter | digit | '_'}.
	// .. weitere Java-Token einfügen und eventuell die dazu nötigen Zeichenklassen
	lpar  = '('.
IGNORE "\t\n\r"

PRODUCTIONS

Instrumenter = { {ANY} Class }.
Class =
			"class" ident           (. enterClass(); .)
			{ANY} "{"
			{
				{ Class
					| "abstract" ident {ANY} ";"
					| ANY               (. checkForMethodDeclaration(); .)
				} Block
			}
			"}"                     (. leaveClass(); .)
		.
Statement =
		"if" BracketExpr Statement ["else" Statement]
		| "switch" BracketExpr "{"
			{"case" {ANY} ":" {Statement}}
			["default" ":" {Statement}]
			"}"
		| "while" BracketExpr Statement
		| "do" Statement "while" BracketExpr ";"
		| "for" BracketExpr Statement
		| "try" Block {"catch" {ANY} Block} ["finally" Block]
		| ("break" | "return" | "continue") {ANY} ";"
		| ident ({ANY | "->" Statement} ";" | ":")
		| Block
		| ";" .
BracketExpr = "(" {BracketExpr | ANY} ")".
Block = "{"                   (. enterBlock(); .)
				{Statement}
				"}"                   (. leaveBlock(); .)
			.

END Instrumenter.
